generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASS_DB_PRISMA")
}

model Game {
  gid                     Int      @id(map: "idx_18403_primary") @default(autoincrement())
  season                  Int
  week                    Int
  ts                      DateTime @db.Timestamptz(6)
  home                    Int
  away                    Int
  homescore               Int?     @default(0)
  awayscore               Int?     @default(0)
  done                    Boolean? @default(false)
  winner                  Int?     @default(0)
  international           Boolean? @default(false)
  seconds                 Int?
  current_record          String?  @default("0-0,0-0") @db.VarChar(50)
  is_tiebreaker           Boolean?
  homerecord              String?  @db.VarChar(10)
  awayrecord              String?  @db.VarChar(10)
  msf_id                  Int?
  teams_games_homeToteams Team     @relation("games_homeToteams", fields: [home], references: [teamid], onUpdate: Restrict, map: "games_ibfk_1")
  teams_games_awayToteams Team     @relation("games_awayToteams", fields: [away], references: [teamid], onUpdate: Restrict, map: "games_ibfk_2")
  picks                   Pick[]

  @@index([season], map: "idx_18403_season")
  @@index([week], map: "idx_18403_week")
  @@index([ts], map: "idx_18403_ts")
  @@index([away], map: "idx_18403_away")
  @@index([home], map: "idx_18403_home")
  @@index([msf_id], map: "idx_18403_msf_id")
  @@map("games")
}

enum MemberRole {
  player
  admin
}

model LeagueMember {
  membership_id  Int             @id(map: "idx_18414_primary") @default(autoincrement())
  league_id      Int
  user_id        Int
  paid           Boolean?        @default(false)
  role           MemberRole?     @default(player)
  ts             DateTime        @default(now()) @db.Timestamptz(6)
  people         User            @relation(fields: [user_id], references: [uid], onUpdate: Restrict, map: "leaguemembers_ibfk_1", onDelete: Cascade)
  leagues        League          @relation(fields: [league_id], references: [league_id], onUpdate: Restrict, map: "leaguemembers_ibfk_2")
  picks          Pick[]
  superbowl      Superbowl[]
  WeekWinners    WeekWinners[]
  EmailLogs      EmailLogs[]
  LeagueMessages LeagueMessage[]

  @@index([paid], map: "idx_18414_paid")
  @@index([role], map: "idx_18414_role")
  @@index([ts], map: "idx_18414_ts")
  @@index([league_id], map: "idx_18414_league_id")
  @@index([user_id], map: "idx_18414_user_id")
  @@map("leaguemembers")
}

enum ScoringType {
  game_winner
}

enum PickPolicy {
  choose_winner
}

enum ReminderPolicy {
  three_hours_before
}

enum LatePolicy {
  allow_late_whole_week
  close_at_first_game_start
  allow_late_and_lock_after_start
}

model League {
  league_id             Int             @id(map: "idx_18422_primary") @default(autoincrement())
  created_by_user_id    Int
  name                  String
  created_time          DateTime        @default(now()) @db.Timestamptz(6)
  season                Int
  share_code            String?         @unique @default(cuid())
  superbowl_competition Boolean?        @default(true)
  people                User            @relation(fields: [created_by_user_id], references: [uid], onUpdate: Restrict, map: "leagues_ibfk_1")
  leaguemembers         LeagueMember[]
  scoring_type          ScoringType?    @default(game_winner)
  pick_policy           PickPolicy?     @default(choose_winner)
  reminder_policy       ReminderPolicy? @default(three_hours_before)
  late_policy           LatePolicy?     @default(allow_late_whole_week)
  WeekWinners           WeekWinners[]
  prior_league_id       Int?            @unique @map("prior_league_id")
  priorLeague           League?         @relation("prior_leagues", fields: [prior_league_id], references: [league_id])
  nextLeague            League?         @relation("prior_leagues")
  EmailLogs             EmailLogs[]
  LeagueMessages        LeagueMessage[]

  @@index([season], map: "idx_18422_season")
  @@index([name], map: "idx_18422_name")
  @@index([created_time], map: "idx_18422_created_time")
  @@index([share_code], map: "idx_share_code") // Added index on shareCode
  @@index([created_by_user_id], map: "idx_18422_created_by_user_id")
  @@map("leagues")
}

model User {
  uid              Int     @id(map: "idx_18430_primary") @default(autoincrement())
  username         String  @db.VarChar(255)
  fname            String  @db.VarChar(255)
  lname            String  @db.VarChar(255)
  email            String  @unique @db.VarChar(255)
  season           Int
  email2           String? @db.VarChar(255)
  google_photo_url String?
  google_email     String?
  google_userid    String?
  supabase_id      String? @unique @db.VarChar(255)

  leaguemembers LeagueMember[]
  leagues       League[]
  picks         Pick[]

  @@index([season], map: "idx_18430_season")
  @@index([supabase_id], map: "idx_18430_supabase_id")
  @@index([email], map: "idx_18430_email_index")
  @@map("people")
}

model Pick {
  pickid        Int           @id(map: "idx_18437_primary") @default(autoincrement())
  uid           Int
  season        Int
  week          Int
  gid           Int
  winner        Int?          @default(0)
  loser         Int?          @default(0)
  score         Int?          @default(0)
  ts            DateTime      @default(now()) @db.Timestamptz(6)
  correct       Int?          @default(0)
  done          Int?          @default(0)
  is_random     Boolean?
  member_id     Int?
  winnerTeam    Team?         @relation("picks_winnerTeam", fields: [winner], references: [teamid])
  games         Game          @relation(fields: [gid], references: [gid], onUpdate: Restrict, map: "picks_ibfk_1")
  people        User          @relation(fields: [uid], references: [uid], onDelete: Cascade, map: "picks_ibfk_2")
  leaguemembers LeagueMember? @relation(fields: [member_id], references: [membership_id], onDelete: Cascade, onUpdate: Restrict, map: "picks_ibfk_3")

  @@index([season], map: "idx_18437_season")
  @@index([week], map: "idx_18437_week")
  @@index([ts], map: "idx_18437_ts")
  @@index([gid], map: "idx_18437_gid")
  @@index([member_id], map: "idx_18437_picks_ibfk_3")
  @@index([week, season], name: "idx_week_season")
  @@index([week, member_id], name: "idx_week_member")
  @@index([week, season, member_id], name: "idx_week_season_member")
  @@index([uid], map: "idx_18437_uid")
  @@map("picks")
}

model Superbowl {
  pickid                        Int           @id(map: "idx_18448_primary") @default(autoincrement())
  uid                           Int
  winner                        Int
  loser                         Int
  score                         Int
  ts                            DateTime?     @default(now()) @db.Timestamptz(6)
  season                        Int?
  member_id                     Int?
  teams_superbowl_loserToteams  Team          @relation("superbowl_loserToteams", fields: [loser], references: [teamid], onDelete: NoAction, onUpdate: NoAction, map: "fk_loser_team")
  leaguemembers                 LeagueMember? @relation(fields: [member_id], references: [membership_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_id")
  teams_superbowl_winnerToteams Team          @relation("superbowl_winnerToteams", fields: [winner], references: [teamid], onDelete: NoAction, onUpdate: NoAction, map: "fk_winner_team")

  @@index([season], map: "idx_18448_season")
  @@index([ts], map: "idx_18448_ts")
  @@index([member_id], map: "idx_18448_member_id")
  @@map("superbowl")
}

model SuperbowlSquare {
  square_id       Int      @id(map: "idx_18454_primary") @default(autoincrement())
  uid             Int
  league_id       Int
  afc_score_index Int
  nfc_score_index Int
  correct         Boolean
  ts              DateTime @default(now()) @db.Timestamptz(6)

  @@index([ts], map: "idx_18454_ts")
  @@map("superbowlsquares")
}

model Team {
  teamid                            Int         @id(map: "idx_18460_primary") @default(autoincrement())
  abbrev                            String?     @db.VarChar(50)
  loc                               String      @db.VarChar(255)
  name                              String      @db.VarChar(255)
  conference                        String?     @db.VarChar(50)
  picks_chosen                      Pick[]      @relation("picks_winnerTeam")
  games_games_homeToteams           Game[]      @relation("games_homeToteams")
  games_games_awayToteams           Game[]      @relation("games_awayToteams")
  superbowl_superbowl_loserToteams  Superbowl[] @relation("superbowl_loserToteams")
  superbowl_superbowl_winnerToteams Superbowl[] @relation("superbowl_winnerToteams")

  @@index([abbrev], map: "idx_18460_abbrev")
  @@index([loc], map: "idx_18460_loc")
  @@index([conference], map: "idx_18460_conference")
  @@map("teams")
}

model WeekWinners {
  id            Int          @id(map: "idx_184XX_primary") @default(autoincrement())
  league_id     Int
  membership_id Int
  week          Int
  correct_count Int
  score_diff    Int
  league        League       @relation(fields: [league_id], references: [league_id])
  member        LeagueMember @relation(fields: [membership_id], references: [membership_id])

  @@index([league_id], map: "idx_184XX_league_id")
  @@index([membership_id], map: "idx_184XX_membership_id")
  @@index([league_id, membership_id], map: "idx_184XX_league_and_membership")
}

enum EmailType {
  league_registration
  week_picks
  week_reminder
  week_summary
}

model EmailLogs {
  email_log_id String    @id @default(cuid())
  resend_id    String
  league_id    Int
  member_id    Int
  week         Int?
  email_type   EmailType
  ts           DateTime  @default(now()) @db.Timestamptz(6)

  league League       @relation(fields: [league_id], references: [league_id], onUpdate: Restrict)
  member LeagueMember @relation(fields: [member_id], references: [membership_id], onDelete: Cascade)

  @@index([league_id], map: "idx_emaillogs_league_id")
  @@index([resend_id], map: "idx_emaillogs_resend_id")
  @@index([member_id], map: "idx_emaillogs_member_id")
  @@index([week], map: "idx_emaillogs_week")
  @@index([league_id, member_id], map: "idx_emaillogs_league_member")
  @@index([league_id, week], map: "idx_emaillogs_league_week")
  @@index([member_id, week], map: "idx_emaillogs_member_week")
  @@index([league_id, member_id, week], map: "idx_emaillogs_league_member_week")
}

model LeagueMessage {
  message_id   String        @id @default(cuid())
  content      String
  member_id    Int
  league_id    Int
  week         Int? // This is optional
  message_type MessageType
  status       MessageStatus @default(PUBLISHED)
  createdAt    DateTime      @default(now())

  member LeagueMember @relation(fields: [member_id], references: [membership_id])
  league League       @relation(fields: [league_id], references: [league_id])

  @@index([league_id])
  @@index([member_id])
  @@index([league_id, member_id])
  @@index([createdAt]) // ts is equivalent to createdAt here
  @@index([message_type])
  @@index([league_id, message_type])
  @@index([league_id, message_type, status])
  @@map("leaguemessages")
}

enum MessageStatus {
  PUBLISHED
  DELETED
}

enum MessageType {
  WEEK_COMMENT
  LEAGUE_MESSAGE
}
