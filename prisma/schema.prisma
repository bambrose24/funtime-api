generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASS_DB_PRISMA")
}

model Game {
  gid                     Int      @id(map: "idx_17979_primary") @default(autoincrement())
  season                  Int
  week                    Int
  ts                      DateTime @db.Timestamptz(6)
  home                    Int
  away                    Int
  homescore               Int?     @default(0)
  awayscore               Int?     @default(0)
  done                    Boolean? @default(false)
  winner                  Int?     @default(0)
  international           Boolean? @default(false)
  seconds                 Int?
  current_record          String?  @default("0-0,0-0") @db.VarChar(50)
  is_tiebreaker           Boolean?
  homerecord              String?  @db.VarChar(10)
  awayrecord              String?  @db.VarChar(10)
  teams_games_homeToteams Team     @relation("games_homeToteams", fields: [home], references: [teamid], onUpdate: Restrict, map: "games_ibfk_1")
  teams_games_awayToteams Team     @relation("games_awayToteams", fields: [away], references: [teamid], onUpdate: Restrict, map: "games_ibfk_2")
  picks                   Pick[]

  @@index([away], map: "idx_17979_away")
  @@index([home], map: "idx_17979_home")
  @@map("games")
}

model LeagueMember {
  membership_id Int         @id(map: "idx_17990_primary") @default(autoincrement())
  league_id     Int
  user_id       Int
  role          String
  ts            DateTime    @default(now()) @db.Timestamptz(6)
  people        User        @relation(fields: [user_id], references: [uid], onUpdate: Restrict, map: "leaguemembers_ibfk_1")
  leagues       League      @relation(fields: [league_id], references: [league_id], onUpdate: Restrict, map: "leaguemembers_ibfk_2")
  picks         Pick[]
  superbowl     Superbowl[]

  @@index([league_id], map: "idx_17990_league_id")
  @@index([user_id], map: "idx_17990_user_id")
  @@map("leaguemembers")
}

model League {
  league_id          Int            @id(map: "idx_17998_primary") @default(autoincrement())
  created_by_user_id Int
  name               String
  scoring_type       String?
  late_policy        String?
  reminder_policy    String?
  created_time       DateTime       @default(now()) @db.Timestamptz(6)
  season             Int?
  people             User           @relation(fields: [created_by_user_id], references: [uid], onUpdate: Restrict, map: "leagues_ibfk_1")
  leaguemembers      LeagueMember[]

  @@index([created_by_user_id], map: "idx_17998_created_by_user_id")
  @@map("leagues")
}

model User {
  uid              Int            @id(map: "idx_18006_primary") @default(autoincrement())
  username         String         @db.VarChar(255)
  fname            String         @db.VarChar(255)
  lname            String         @db.VarChar(255)
  email            String         @db.VarChar(255)
  season           Int
  email2           String?        @db.VarChar(255)
  google_photo_url String?
  google_email     String?
  google_userid    String?
  leaguemembers    LeagueMember[]
  leagues          League[]
  picks            Pick[]

  @@index([email], map: "idx_18006_email_index")
  @@map("people")
}

model Pick {
  pickid        Int           @id(map: "idx_18013_primary") @default(autoincrement())
  uid           Int
  season        Int
  week          Int
  gid           Int
  winner        Int?          @default(0)
  loser         Int?          @default(0)
  score         Int?          @default(0)
  ts            DateTime      @default(now()) @db.Timestamptz(6)
  correct       Int?          @default(0)
  done          Int?          @default(0)
  is_random     Boolean?
  member_id     Int?
  games         Game          @relation(fields: [gid], references: [gid], onUpdate: Restrict, map: "picks_ibfk_1")
  people        User          @relation(fields: [uid], references: [uid], onUpdate: Restrict, map: "picks_ibfk_2")
  leaguemembers LeagueMember? @relation(fields: [member_id], references: [membership_id], onDelete: Restrict, onUpdate: Restrict, map: "picks_ibfk_3")

  @@index([gid], map: "idx_18013_gid")
  @@index([member_id], map: "idx_18013_picks_ibfk_3")
  @@index([uid], map: "idx_18013_uid")
  @@map("picks")
}

model Superbowl {
  pickid        Int           @id(map: "idx_18024_primary") @default(autoincrement())
  uid           Int
  winner        Int
  loser         Int
  score         Int
  ts            DateTime?     @default(now()) @db.Timestamptz(6)
  season        Int?
  member_id     Int?
  leaguemembers LeagueMember? @relation(fields: [member_id], references: [membership_id], onDelete: Restrict, onUpdate: Restrict, map: "superbowl_ibfk_1")

  @@index([member_id], map: "idx_18024_member_id")
  @@map("superbowl")
}

model SuperbowlSquare {
  square_id       Int      @id(map: "idx_18030_primary") @default(autoincrement())
  uid             Int
  league_id       Int
  afc_score_index Int
  nfc_score_index Int
  correct         Boolean
  ts              DateTime @default(now()) @db.Timestamptz(6)

  @@map("superbowlsquares")
}

model Team {
  teamid                  Int     @id(map: "idx_18036_primary") @default(autoincrement())
  abbrev                  String? @db.VarChar(50)
  loc                     String  @db.VarChar(255)
  name                    String  @db.VarChar(255)
  conference              String? @db.VarChar(50)
  games_games_homeToteams Game[]  @relation("games_homeToteams")
  games_games_awayToteams Game[]  @relation("games_awayToteams")

  @@map("teams")
}
